! Testing for the discontinuous boundary creation.
! This test case has Delaunay triangularization which requires 
! some special tricks compared to structured meshes. This is due 
! to the single nodes on the boundary.
!
! This case has demonstrates also how to create two different BCs of the
! one initial BC and use other conditions for that.
!
! Additionally this case shows how to use mesh.names to define the 
! 'Target Boundaries' and 'Target Bodies'
!
! P.R. / 12.3.2014

Header
  CHECK KEYWORDS Warn
  Mesh DB "." "circle_in_square"
  Include Path ""
  Results Directory ""
End

Simulation
  Max Output Level = 32

  Coordinate System = "Cartesian"
  Coordinate Mapping(3) = 1 2 3

  Simulation Type = "Steady State"
  Steady State Max Iterations = 1
  Output Intervals = 1

!  Post File = "discont.vtu"

  Discontinuous Bulk Greedy = Logical True	

  Use Mesh Names = Logical True
End

Constants
  Gravity(4) = 0 -1 0 9.82
  Stefan Boltzmann = 5.67e-08
End

Body 1
  Name = "Square"
!  Target Bodies(1) = 1
  Equation = 1
  Material = 1
  Body Force = 1
End

Body 2
  Name = "Circle"
  Target Bodies(1) = 2
  Equation = 1
  Material = 1
  Body Force = 2
End

Body Force 1
  Name = "SquareSource"
End 

Body Force 2
  Name = "CircleSource"
  Mesh Translate 1 = 3.5
  Heat Source = 1.0e1
End 

Equation 1
  Name = "Equations"
  Active Solvers(3) = 1 2 3
End

! Moves the inner circle as defined in the body force section
Solver 1
  Exec Solver = Before all
  Equation = MeshDeform
  Procedure = "RigidMeshMapper" "RigidMeshMapper"
End


Solver 2
  Exec Solver = "Always"
  Equation = "Heat Equation"
  Variable = "Temperature"
  Variable Dofs = 1
  Linear System Solver = "iterative"
  Linear System Iterative Method = "BiCGStab"
  Linear System Max Iterations = 1000
  Linear System Convergence Tolerance = 1.0e-08
  Linear System Abort Not Converged = True
  Linear System Preconditioning = "ILU1"
  Linear System Residual Output = 10
  Steady State Convergence Tolerance = 1.0e-05
  Stabilize = True
  Nonlinear System Convergence Tolerance = 1.0e-05
  Nonlinear System Max Iterations = 1
  Nonlinear System Newton After Iterations = 3
  Nonlinear System Newton After Tolerance = 1.0e-02
  Nonlinear System Relaxation Factor = 1.0

  Linear System Abort Not Converged = False
!  Optimize Bandwidth = False
End


Solver 3
  Exec Solver = never

  Equation = ComputeFlux
  Procedure = "FluxSolver" "FluxSolver"

  Calculate Flux = Logical True
  Target Variable = String Temperature
  Flux Coefficient = String "Heat Conductivity"

! these are taken care by the defaults
  Linear System Solver = "Iterative"
  Linear System Iterative Method = "BIcgstab"
  Linear System Preconditioning = ILU1
  Linear System Residual Output = 0
  Linear System Max Iterations = Integer 1000
  Linear System Convergence Tolerance = 1.0e-8

!  Optimize Bandwidth = False
End


Material 1
  Name = "Material"
  Density = 1
  Heat Conductivity = 1
End


Boundary Condition 1
  Name = "Bottom"
!  Target Boundaries(1) = 1
End

Boundary Condition 2
  Name = "Right"
!  Target Boundaries(1) = 2
  Temperature = 1.0
End

Boundary Condition 3
  Name = "Top"
!  Target Boundaries(1) = 3
End

Boundary Condition 4
  Name = "Left"
!  Target Boundaries(1) = 4
  Temperature = -1.0
End

Boundary Condition 5
  Name = "Jump"
!  Target Boundaries(4) = 5 6 7 8 

! This activates the discontinuous boundary creation
  Discontinuous Boundary = Logical True

! This keyword makes two different boundaries
! Without creating any projectors.
  Discontinuous BC = Integer 6
End


! This is created on-the-fly due to the keyword 
! > Discontinuous BC < 
Boundary Condition 6
  Name = "Jump-Second"
  
  Temperature = -1.0
End 

$fprintf( stderr, "TEST CASE 1\n");
RUN
$fprintf( stderr, "END TEST CASE 1: Target NRM= 0.71345928\n");
!End Of File
