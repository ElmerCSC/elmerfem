!---------------------------------------------------------------------------
! This is a test case that combines mortar finite elements
! and deforming meshes. Usually mortar methods are used in conjunction
! with rigid body movement but there is no reason why those could not
! be combined. This case could be also solved with pure mortar methods
! but then excess mesh would spil over. Numerically optimal strategy would
! be remeshing but it is not always available. 
!
! P.R. 30.9.2021
!--------------------------------------------------------------------------

Check Keywords "Warn"
Header
  Mesh DB "." "slide_squares"
End

! Number of timestep and max movement
! Increase for smoother figure
$nsteps = 10
$L=0.5
$dx=L/(nsteps-1)

Simulation
  Max Output Level = 6
  Coordinate System = "Cartesian"
  Simulation Type = scanning
  Timestep Intervals = $nsteps
  Output Intervals = 1
  Steady State Max Iterations = 1

! Uncomment for saving the results
  Post File = case.vtu
End

Body 1
  Name = "UpAir"
  Equation = 1
  Material = 1
  Body Force = 1
End

Body 2
  Name = "DownAir"
  Equation = 2
  Material = 1
End

Body 3
  Name = "UpSquare"
  Equation = 1
  Material = 1
  Body Force = 1 
End

Body 4
  Name = "DownSquare"
  Equation = 2
  Material = 1
End


Equation 1
  Name = "Moving elstat"
  Active Solvers(2) = 1 2
End

Equation 2
  Name = "Staying elstat"
  Active Solvers(1) = 2
End

Body Force 1
  Name = "MoveIt"
  Mesh Translate 1 = Variable "time"
    Real MATC "dx*(tx-1)"
End

Material 1
  Name = "Ideal"
  Relative Permittivity = 1.0
  Electric Conductivity = 1.0
  Density = 1.0
End 


Solver 1
! Solves the new mesh positions combining rigid mesh movement
! and a computed relaxation field [0,1] computed from a Laplace equation.

  Equation = MeshDeform
  Procedure = "RigidMeshMapper" "RigidMeshMapper"

  Variable = MeshRelax
  Nonlinear System Max Iterations = 1

  Linear System Solver = Iterative
  Linear System Iterative Method = BiCGStab
  Linear System Max Iterations = 500
  Linear System Convergence Tolerance = 1.0e-10
  Linear System Preconditioning = ILU1
  Linear System Residual Output = 20
End

Solver 2
  Equation = PotSolver
  Variable = Potential
  Procedure = "StatElecSolve" "StatElecSolver"
!  Procedure = "StatCurrentSolve" "StatCurrentSolver"

  Steady State Convergence Tolerance = 1.0e-5

  Nonlinear System Max Iterations = 1

  Linear System Solver = Iterative
  Linear System Iterative Method = BiCGStab
  Linear System Max Iterations = 500
  Linear System Convergence Tolerance = 1.0e-8
  Linear System Preconditioning = ILU1
  Linear System Residual Output = 20

  Apply Mortar BCs = True
  Calculate Electric Energy = True
End 

Solver 3
  Equation = SaveScalars
  Procedure = "SaveData" "SaveScalars"
  Filename = f.dat

  Variable 1 = time
  Expression 1 = Variable "time"
    Real MATC "dx*(tx-1)"

! to plot the energy as function of position in Matlab/Octave
! load f.dat; plot(f(:,5),f(:,2)

! Use last electric energy as reference
  Show Norm Index = 2
End


Boundary Condition 1
  Name = "ZeroStay"
  Target Boundaries(1) = 1 
  Potential = 0.0
! Special keyword when solving the MeshRelax field
  Fixed Boundary = Logical True
End

Boundary Condition 2
  Name = "Zero"
  Target Boundaries(2) = 2 7
  Potential = 0.0
End

Boundary Condition 3
  Name = "Plus"
  Target Boundaries(1) = 3
  Potential = 1.0
! Special keyword when solving the MeshRelax field
  Moving Boundary = Logical True
End

Boundary Condition 4
  Name = "Minus"
  Target Boundaries(1) = 4
  Potential = -1.0
End

Boundary Condition 5
  Name = "UpperSlide"
  Target Boundaries(1) = 5
  Mortar BC = 6
  Plane Projector = Logical True
  Galerkin Projector = Logical True
End

Boundary Condition 6
  Name = "DownSlide"
  Target Boundaries(1) = 6
End 

Solver 1::Reference Norm = 6.17377332E-01
Solver 2::Reference Norm = 4.95408289E-01
Solver 3::Reference Norm = 3.01817616E+00

